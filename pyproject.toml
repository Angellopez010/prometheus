[project]
name = "prometheus"
version = "0.2.0"
description = "PDF Liberation MCP Server - Break large PDFs into digestible chunks"
readme = "README.md"
license = "AGPL-3.0-or-later"
requires-python = ">=3.12"
authors = [
    {name = "Terry", email = "terry@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3.12",
    "Topic :: Text Processing :: Filters",
    "Topic :: Office/Business",
]

dependencies = [
    "fastmcp>=0.1.0",
    "PyMuPDF>=1.26.0",  # Latest version for best performance
    "pydantic>=2.5.0",
    "typer>=0.9.0",
    "rich>=13.0.0",  # For beautiful CLI output
    "tiktoken>=0.5.0",  # For token counting
    "structlog>=23.0.0",  # Structured logging
    "python-dotenv>=1.0.0",  # Environment management
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]

[project.scripts]
prometheus = "prometheus.server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "RUF",  # Ruff-specific rules
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "PT",   # flake8-pytest-style
]
ignore = [
    "E501",  # Line length handled by formatter
    "B008",  # Function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"